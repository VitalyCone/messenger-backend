// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	model "github.com/VitalyCone/websocket-messenger/internal/app/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// LoginUsers mocks base method.
func (m_2 *MockUser) LoginUsers(m model.User) (interface{}, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "LoginUsers", m)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUsers indicates an expected call of LoginUsers.
func (mr *MockUserMockRecorder) LoginUsers(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUsers", reflect.TypeOf((*MockUser)(nil).LoginUsers), m)
}

// RegisterUser mocks base method.
func (m_2 *MockUser) RegisterUser(m model.User) (interface{}, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RegisterUser", m)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockUserMockRecorder) RegisterUser(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockUser)(nil).RegisterUser), m)
}
